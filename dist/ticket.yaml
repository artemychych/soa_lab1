openapi: 3.0.3
info:
  title: Ticket
  description: Сервис для билетов
  version: 1.0.0
servers:
  - url: 'https://localhost:6601/service/v1'
paths:
  /tickets:
    get:
      summary: Получить список Билетов
      description: Получить список объектов Ticket
      operationId: getTickets
      tags:
        - Ticket
      responses:
        '200':
          description: Возращает список Билетов
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Tickets'
        '404':
          description: Ни одного билета не найдено
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error404'
        default:
          description: Возращает код ошибки, сообщение и время
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: sort
          in: query
          description: Параметры для сортировки Билетов
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - -id
                - name
                - -name
                - creationDate
                - -creationDate
                - coordinates.x
                - -coordinates.x
                - coordinates.y
                - -coordinates.y
                - price
                - -price
                - type
                - -type
                - person.weight
                - -person.weight
                - person.hairColor
                - -person.hairColor
                - person.location.x
                - person.location.y
                - person.location.z
                - person.location.name
                - -person.location.x
                - -person.location.y
                - -person.location.z
                - -person.location.name
        - name: filter
          in: query
          required: false
          description: Поля для фильтрации
          schema:
            type: array
            items:
              type: string
              example: price[gr]=600
          style: deepObject
          explode: true
        - name: page
          in: query
          required: false
          description: Номер страницы
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: pageSize
          in: query
          required: false
          description: Кол-во Билетов в 1-ой странице
          schema:
            type: integer
            default: 10
            minimum: 1
    post:
      summary: Добавить новый Билет
      description: Добавить объект Ticket
      operationId: addTicket
      tags:
        - Ticket
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: Возвращает добавленный Билет
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Невалидные данные
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error400'
        default:
          description: Возращает код ошибки, сообщение и время
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/{id}:
    get:
      summary: Получить Билет по id
      description: Получить объект Ticket по id
      operationId: getTicket
      parameters:
        - name: id
          in: path
          required: true
          description: id of Ticket
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      tags:
        - Ticket
      responses:
        '200':
          description: Возращает Билет по id
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Невалидные данные
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Билет не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error404'
        default:
          description: Возращает код ошибки, сообщение и время
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Обновить Билет по id
      description: Обновить объект Ticket по id
      operationId: updateTicket
      parameters:
        - name: id
          in: path
          required: true
          description: id of Ticket
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      tags:
        - Ticket
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: Возвращает обновленный объект Ticket
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Невалидные данные
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Билет не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error404'
        default:
          description: Возращает код ошибки, сообщение и время
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Удалить Билет по id
      description: Удалить объект Ticket по id
      operationId: deleteTicket
      parameters:
        - name: id
          in: path
          required: true
          description: id объекта Ticket, который должен быть удален
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      tags:
        - Ticket
      responses:
        '204':
          description: Объект Ticket успешно удален по id
        '400':
          description: Невалидные данные
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Билет не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error404'
        default:
          description: Возращает код ошибки, сообщение и время
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/delete/{type}:
    delete:
      summary: Удалить все объекты Ticket, значение поля type которого эквивалентно заданному
      operationId: deleteTicketsByType
      tags:
        - Operations
      parameters:
        - name: type
          in: path
          required: true
          description: Тип Ticket для удаления
          schema:
            type: string
            nullable: false
            example: VIP
      responses:
        '200':
          description: Билеты с таким типом были успешно удалены
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Tickets'
        '400':
          description: Невалидные данные
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Билет не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error404'
        default:
          description: Возращает код ошибки, сообщение и время
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/minimum-type:
    get:
      summary: Вернуть один (любой) объект Ticket, значение поля type которого является минимальным
      operationId: minimumTypeTicket
      tags:
        - Operations
      responses:
        '200':
          description: Возвращает объект Ticket c минимальным type
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Ни одного билета не найдено
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error404'
        default:
          description: Возращает код ошибки, сообщение и время
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/name/{substring}:
    get:
      summary: Вернуть массив объектов Ticket, значение поля name которых начинается с заданной подстроки
      operationId: getTicketsStartingBySubstring
      tags:
        - Operations
      parameters:
        - name: substring
          in: path
          required: true
          description: Подстрока начала имени объекта Ticket
          schema:
            type: string
            nullable: false
            example: Metall
      responses:
        '200':
          description: Возвращает массив объектов Ticket, начинающихся с заданной подстроки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Tickets'
        '404':
          description: Ни одного билета не найдено
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error404'
        '400':
          description: Невалидные данные
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error400'
        default:
          description: Возращает код ошибки, сообщение и время
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    TicketType:
      type: string
      enum:
        - VIP
        - USUAL
        - BUDGETARY
        - CHEAP
    Color:
      type: string
      enum:
        - GREEN
        - BLUE
        - YELLOW
        - WHITE
        - BROWN
    Location:
      type: object
      properties:
        x:
          type: number
          format: float
          nullable: false
        y:
          type: number
          format: float
          nullable: false
        z:
          type: number
          format: float
          nullable: false
        name:
          type: string
          nullable: false
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 1
          description: ID for Person
          nullable: false
        weight:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        hairColor:
          $ref: '#/components/schemas/Color'
        location:
          $ref: '#/components/schemas/Location'
    Coordinates:
      type: object
      properties:
        x:
          type: number
          format: float
        y:
          type: integer
          format: int32
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 1
          description: ID for Ticket
          nullable: false
        name:
          type: string
          nullable: false
          minLength: 1
        coordinates:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          nullable: false
          example: 2023-10-11T17:32:28Z
        price:
          type: number
          format: float
          nullable: true
          minimum: 0
          exclusiveMinimum: true
        type:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/TicketType'
        person:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Person'
      xml:
        name: Ticket
    Tickets:
      type: array
      xml:
        wrapped: true
        name: Tickets
      items:
        $ref: '#/components/schemas/Ticket'
    Error:
      type: object
      xml:
        name: Error
      required:
        - httpCode
        - message
        - time
      properties:
        code:
          type: integer
          format: int32
          example: 500
        message:
          type: string
          example: Internal server error
        time:
          type: string
          format: date-time
          example: 2023-11-10T23:00:32Z
    Error400:
      type: object
      xml:
        name: Error400
      required:
        - httpCode
        - message
        - time
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: Validation Failed
        time:
          type: string
          format: date-time
          example: 2023-11-10T23:00:32Z
    Error404:
      type: object
      xml:
        name: Error404
      required:
        - httpCode
        - message
        - time
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: Item not found
        time:
          type: string
          format: date-time
          example: 2023-11-10T23:00:32Z









